@model ProductDetailsModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Seo
@using Nop.Services.Html

@inject CatalogSettings catalogSettings
@inject IHtmlFormatter htmlFormatter
@inject ISettingService settingService
@inject IStoreContext  storeContext
@inject IWebHelper webHelper
@inject SeoSettings seoSettings

@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    NopHtml.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl<Product>(new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        NopHtml.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }

    var showShareButton = catalogSettings.ShowShareButton;
    
    NopHtml.AddJsonLdParts(Model.JsonLd);
}

@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div data-productid="@Model.Id">
                <div class="product-essential">
                    <div class="mobile-name-holder"></div>
                    <div class="mobile-prev-next-holder"></div>
					@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                    <div class="gallery">
                        @{
                            var cloudZoom = await Component.InvokeAsync("Widget", new { widgetZone = "sevenspikes_cloud_zoom", additionalData = Model });
                        }
                        @if (!String.IsNullOrEmpty(await cloudZoom.RenderHtmlContentAsync()))
                        {
                            @cloudZoom
                            @await Html.PartialAsync("_ProductDetailsVideos", Model)
                        }
                        else
                        {
                            <!--product pictures-->
                            @await Html.PartialAsync("_ProductDetailsPictures", Model)
                            <!--product videos-->
                            @await Html.PartialAsync("_ProductDetailsVideos", Model)
                        }
                    </div>
                    <div class="overview">
                        <div class="prev-next-holder">
                            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                        </div>
                        <!--product breadcrumb-->
                        @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
                        @await Html.PartialAsync("_Discontinued", Model)
                        <div class="product-name">
                            <h1>
                                @Model.Name
                            </h1>
                            <!--manufacturers-->
                            @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                        </div>
                        <div class="reviews-and-compare">
                            <!--product reviews-->
                            @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                            <!--compare button-->
                            @await Html.PartialAsync("_CompareProductsButton", Model)
                        </div>
                        <!--short description-->
                        @if (!string.IsNullOrEmpty(Model.ShortDescription))
                        {
                            <div class="short-description">
                                @Html.Raw(Model.ShortDescription)
                            </div>
                        }
                        <!--SKU, MAN, GTIN, vendor-->
                        @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                        <div class="attributes-wrapper">
                            <!--attributes-->
                            @{
                                var dataDictAttributes = new ViewDataDictionary(ViewData);
                                dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                                @await Html.PartialAsync("_ProductAttributes", Model, dataDictAttributes)
                            }
                            <!--gift card-->
                            @{
                                var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                                @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                            }
                            <!--rental info-->
                            @{
                                var dataDictRental = new ViewDataDictionary(ViewData);
                                dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                                 @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                            }

                            @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                        </div>
                        @if (showShareButton)
                        {
                            @await Html.PartialAsync("_ShareButton", Model)
                        }
                        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })

                        <div class="product-prices-box">
                            <div>
                                <!--availability-->
                                @await Html.PartialAsync("_Availability", Model)
                                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                                <!--price & add to cart-->
                                @{
                                    var dataDictPrice = new ViewDataDictionary(ViewData);
                                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                            		@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductPriceTop, additionalData = Model })
                                    @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)
                            		@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductPriceBottom, additionalData = Model })

                                    var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                    dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                    @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                                }
                                <!--sample download-->
                                @await Html.PartialAsync("_DownloadSample", Model)
                                <!--add to wishlist-->
                                @{
                                    var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                    dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                    @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                }
                                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                                <!--delivery-->
                                @await Html.PartialAsync("_ProductEstimateShipping", Model.ProductEstimateShipping)
                                @await Html.PartialAsync("_DeliveryInfo", Model)
                            </div>
                        </div>
                    </div>
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                </div>

                @{
                    var productTabs = await Component.InvokeAsync("Widget", new { widgetZone = "seven_spikes_product_tabs", additionalData = Model });
                    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;

                    var productsTabAreEnabled = !string.IsNullOrEmpty(await productTabs.RenderHtmlContentAsync());

                    var isDescriptionTabEnabled = await settingService.GetSettingByKeyAsync("tabsettings.enableproductfulldescriptiontab", false, storeId, true);
                    var isSpecificationsTabEnabled = await settingService.GetSettingByKeyAsync("tabsettings.enableproductspecificationstab", false, storeId, true);

                    var shouldShowDescription = !string.IsNullOrEmpty(Model.FullDescription) && (!productsTabAreEnabled || !isDescriptionTabEnabled);
                    var shouldShowSpecifications = !productsTabAreEnabled || !isSpecificationsTabEnabled;
                }

                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })

                @if (productsTabAreEnabled)
                {
                    @productTabs
                }

                @if (shouldShowDescription)
                {
                    <div class="full-description">
                        @Html.Raw(Model.FullDescription)
                    </div>
                }

                @if (shouldShowSpecifications)
                {
                    <div class="product-collateral">
                        @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
                    </div>
                }
            </div>
        </form>
        @await Html.PartialAsync("_ProductTags", Model.ProductTags)
        <!--product reviews-->
        @if (Model.ProductReviewOverview.AllowCustomerReviews)
        {
            @await Html.PartialAsync("_ProductReviews", Model.ProductReviews)
        }
        @{
            var relatedProducts = await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_related_carosuel" });
            var alsoPurchased = await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_purchased_carosuel" });
                
            if (String.IsNullOrEmpty(await relatedProducts.RenderHtmlContentAsync()))
            {
                <!-- related products grid -->
                @await Component.InvokeAsync(typeof(RelatedProductsViewComponent), new { productId = Model.Id })
            }
            if (String.IsNullOrEmpty(await alsoPurchased.RenderHtmlContentAsync()))
            {
                <!-- also purchsed products grid -->
                @await Component.InvokeAsync(typeof(ProductsAlsoPurchasedViewComponent), new { productId = Model.Id })
            }
        }
        @if (!String.IsNullOrEmpty(await relatedProducts.RenderHtmlContentAsync()) || !String.IsNullOrEmpty(await alsoPurchased.RenderHtmlContentAsync()))
        {
            <div class="carousel-wrapper">
                @if (!String.IsNullOrEmpty(await relatedProducts.RenderHtmlContentAsync()))
                {
                    @relatedProducts
                }
                @if (!String.IsNullOrEmpty(await alsoPurchased.RenderHtmlContentAsync()))
                {
                    @alsoPurchased
                }
            </div>
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>
