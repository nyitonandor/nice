@model TopMenuModel

@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Topics
@using Nop.Web.Models.Catalog

@{
    var isRtl = await Html.ShouldUseRtlThemeAsync();
}

<input type="hidden" value="@isRtl.ToString().ToLowerInvariant()" id="isRtlEnabled" />

@functions {
    async Task CategoryLine(TopMenuModel.CategoryLineModel lineModel)
    {
        var subCategories = lineModel.ResponsiveMobileMenu ?
        //responsive (all categories)
        lineModel.Category.SubCategories :
        //standard design (only categories with "IncludeInTopMenu")
        lineModel.Category.SubCategories.Where(x => x.IncludeInTopMenu).ToList();

        var hasSubCategories = String.Empty;
        @if (subCategories.Count > 0)
        {
            hasSubCategories = "with-subcategories";
        }

        <li @if (lineModel.Level == 0) {<text>class="root-category-items"</text>}>
            @if (lineModel.Category.NumberOfProducts.HasValue)
            {
                <a class="@hasSubCategories" href="@(Url.RouteUrl<Category>(new { SeName = lineModel.Category.SeName }))">@lineModel.Category.Name
                    @T("Categories.TotalProducts", lineModel.Category.NumberOfProducts.Value)</a>
            }
            else
            {
                <a class="@hasSubCategories" href="@(Url.RouteUrl<Category>(new { SeName = lineModel.Category.SeName }))">@lineModel.Category.Name</a>
            }
            @if (subCategories.Count > 0)
            {
                <div class="plus-button"></div>
                <div class="sublist-wrap">
                    <ul class="sublist">
                        <li class="back-button">
                            <span>@T("SevenSpikes.Themes.Common.BackSublist")</span>
                        </li>
                        @foreach (var subCategory in subCategories)
                        {
                            var categoryLineModel = new TopMenuModel.CategoryLineModel
                            {
                                Category = subCategory,
                                Level = lineModel.Level + 1,
                                ResponsiveMobileMenu = lineModel.ResponsiveMobileMenu
                            };
                            await CategoryLine(categoryLineModel);
                        }
                    </ul>
                </div>
            }
        </li>
    }
}

<ul class="top-menu">
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuBefore, additionalData = Model })
    @{
        var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
    }
    <li class="all-categories">
        <span>@T("SevenSpikes.Themes.Emporium.Header.AllCategories")</span>
        <div class="plus-button"></div>
        <div class="sublist-wrap">
            <ul class="sublist">
                <li class="back-button">
                    <span>@T("SevenSpikes.Themes.Common.BackSublist")</span>
                </li>
                @foreach (var category in rootCategories)
                {
                    var categoryLineModel = new TopMenuModel.CategoryLineModel
                    {
                        Category = category
                    };
                    await CategoryLine(categoryLineModel);
                }
            </ul>
        </div>
    </li>
    @if (Model.DisplayHomepageMenuItem)
    {
        <li><a href="@Url.RouteUrl("Homepage")">@T("HomePage")</a></li>
    }
    @foreach (var topic in Model.Topics)
    {
        <li><a href="@(Url.RouteUrl<Topic>(new { SeName = topic.SeName }))">@topic.Name</a></li>
    }
    @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
    {
        <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
    }
    @if (Model.DisplayProductSearchMenuItem)
    {
        <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
    }
    @if (Model.DisplayCustomerInfoMenuItem)
    {
        <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
    }
    @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
    {
        <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
    }
    @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
    {
        <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
    }
    @if (Model.DisplayContactUsMenuItem)
    {
        <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
    }
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuAfter, additionalData = Model })
</ul>

